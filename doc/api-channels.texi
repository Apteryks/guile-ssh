@c -*-texinfo-*-
@c This file is part of Guile-SSH Reference Manual.
@c Copyright (C) 2014 Artyom V. Poptsov
@c See the file guile-ssh.texi for copying conditions.

@node Channels
@section Channels

@cindex data transferring
@tindex channel

The @code{(ssh channel)} module provides facilities to create
Guile-SSH channels and manipulating of them.

Channels are implemented as GNU Guile ports.  Therefore they can be
used with regular I/O procedures such as @code{display}, @code{write},
@code{read-line} and friends (@pxref{Input and Output,,, guile, The
GNU Guile Reference Manual}).  This section describes operations that
are specific for the channels.

@deffn {Scheme Procedure} channel? x
Return @code{#t} if @var{x} is a Guile-SSH channel, @code{#f}
otherwise.
@end deffn

@deffn {Scheme Procedure} make-channel session
Allocate a new Guile-SSH channel for the @var{session}
(@pxref{Sessions}).
@end deffn

@deffn {Scheme Procedure} channel-open-session channel
Open a session channel.  This procedure actually turn the
@var{channel} into an open port available for I/O operations.  Throw
@code{guile-ssh-error} on error.  Return value is undefined.
@end deffn

@deffn {Scheme Procedure} channel-request-exec channel command
@cindex non-interactive SSH session
@cindex command execution
Run a shell @var{command} without an interactive shell.  Throw
@code{guile-ssh-error} on error.  Return value is undefined.

Example:

@lisp
(let ((channel (make-channel session)))
  (channel-open-session channel)
  (channel-request-exec channel "uname")
  (read-line channel))
@result{} "Linux"
@end lisp

@end deffn

@deffn {Scheme Procedure} channel-request-pty channel
Request a @acronym{PTY} (pseudo terminal).  Throw
@code{guile-ssh-error} on error.  Return value is undefined.
@end deffn

@deffn {Scheme Procedure} channel-request-shell channel
Request a shell.  Throw @code{guile-ssh-error} on error.  Return value
is undefined.
@end deffn

@deffn {Scheme Procedure} channel-request-env channel variable value
@cindex setting of environment variables
Set an environment @var{variable} to @var{value}.  Throw
@code{guile-ssh-error} on error.  Return value is undefined.
@end deffn

@deffn {Scheme Procedure} channel-set-pty-size! channel columns rows
Change size of the @acronym{PTY} to @var{columns} and @var{rows}.
Return value is undefined.
@end deffn

@deffn {Scheme Procedure} channel-set-stream! channel stream
Set default @var{stream} for @var{channel}.  @var{stream} must be one
of the following symbols: @code{stdout} (default), @code{stderr}.
Throw @code{guile-ssh-error} on error.  Return value is undefined.

Example:

@lisp
(channel-set-stream! channel 'stderr)
@end lisp
@end deffn

@deffn {Scheme Procedure} channel-get-stream channel
Get current stream name from @var{channel}.  Throw
@code{guile-ssh-error} on error.  Return one of the following symbols:
@code{stdout}, @code{stderr}.

Example:

@lisp
(channel-get-stream channel)
@result{} 'stderr
@end lisp
@end deffn

@deffn {Scheme Procedure} channel-eof? channel
Return @code{#t} if remote has sent @acronym{EOF}, @code{#f}
otherwise.
@end deffn

@subsection Port forwarding
@cindex Port forwarding

@deffn {Scheme Procedure} %channel-open-forward channel remote-host remote-port source-host local-port
Open a TCP/IP forwarding channel.  Connect to a @var{remote-host} and
@var{remote-port}, and use @var{source-host} and @var{local-port} as
origination of connections.

Please @strong{note} that the procedure does not bind the @var{local-port} and
does not automatically forward the content of a socket to the channel.
@end deffn

@deffn {Scheme Procedure} channel-open-forward channel #:key source-host local-port remote-host remote-port
Convenient wrapper upon the more primitive @code{%channel-open-forward}
procedure.

If the @var{source-host} is not set, then "localhost" is used.  If
@var{remote-port} is not set, then it will be set to @var{local-port} value.

Example:

@lisp
(channel-open-forward channel
                      #:local-port  8080
                      #:remote-host "www.example.com"
                      #:remote-port 80)
@end lisp
@end deffn

@deffn {Scheme Procedure} %channel-open-forward/reverse channel remote-host remote-port source-host local-port
Open a TCP/IP reverse forwarding channel.

Please @strong{note} that the procedure does not bind the @var{local-port} and
does not automatically forward the content of a socket to the channel.
@end deffn

@deffn {Scheme Procedure} channel-open-forward/reverse channel #:key source-host local-port remote-host remote-port
Convenient wrapper upon the more primitive
@code{%channel-open-forward/reverse} procedure.
@end deffn

@c Local Variables:
@c TeX-master: "guile-ssh.texi"
@c End:
